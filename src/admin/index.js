async function ensureUserAuthenticated() {
  let userData = localStorage.getItem("user");

  if (!userData) {
    console.warn("user –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage. –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å access_token...");
    const newAccessToken = await refreshAccessToken();
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç refreshAccessToken:", newAccessToken);

    if (!newAccessToken) {
      console.warn("refreshAccessToken –≤–µ—Ä–Ω—É–ª null. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /login.html");
      window.location.href = "/login.html";
      return null;
    }

    userData = localStorage.getItem("user");
    if (!userData) {
      console.warn("user –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –†–µ–¥–∏—Ä–µ–∫—Ç.");
      window.location.href = "/login.html";
      return null;
    }
  }

  return JSON.parse(userData);
}

function renderUserInfo(user) {
  const avatarEl = document.getElementById("user-avatar");
  const nameEl = document.getElementById("user-name");
  const roleEl = document.getElementById("user-role");
  const welcomeEl = document.querySelector("h1.text-xl");

  const imgPath = user.profile.image;
  avatarEl.src = imgPath.startsWith("http")
    ? imgPath
    : `https://portal.gradients.academy${imgPath}`;

  nameEl.textContent = user.profile.full_name_ru;
  const firstName = user.profile.full_name_ru.split(" ")[0];
  welcomeEl.textContent = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName} üëã`;

  const roleMap = {
    administrator: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
  };
  roleEl.textContent = roleMap[user.profile.role] || user.profile.role;
}

async function loadDashboardSummary() {
  const res = await authorizedFetch("https://portal.gradients.academy/results/dashboard/summary/");
  if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");

  const summary = await res.json();

  document.getElementById("registered-count").textContent = summary.registered_count;
  document.getElementById("active-olympiads").textContent = summary.active_olympiads;
  document.getElementById("average-score").textContent = summary.average_score;
  document.getElementById("total-tasks").textContent = summary.total_tasks;

  console.log("–î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", summary);
}

async function loadCurrentOlympiad() {
  const res = await authorizedFetch("https://portal.gradients.academy/results/dashboard/current/");
  if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –æ–ª–∏–º–ø–∏–∞–¥—ã");

  const olympiad = await res.json();
  console.log("–¢–µ–∫—É—â–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞:", olympiad);

  const block = document.querySelector(".olympiad-block");
  if (!block) return;

  block.querySelector("p.font-bold").textContent = olympiad.title;
  block.querySelector("p.text-sm").textContent = olympiad.description;

  const stageBlocks = block.querySelectorAll(".date");
  olympiad.stages.forEach((stage, index) => {
    if (stageBlocks[index]) {
      stageBlocks[index].textContent = `${stage.start} - ${stage.end}`;
      const stageTitleEl = stageBlocks[index].previousElementSibling;
      if (stageTitleEl && stageTitleEl.classList.contains("flex")) {
        stageTitleEl.querySelector("span.font-bold").textContent = stage.name;
      }
    }
  });
}

async function loadCurrentOlympiadStats() {
  const res = await authorizedFetch("https://portal.gradients.academy/results/dashboard/current_stats/");
  if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–π –æ–ª–∏–º–ø–∏–∞–¥—ã");

  const stats = await res.json();
  console.log("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –æ–ª–∏–º–ø–∏–∞–¥—ã:", stats);

  document.getElementById("participants-count").textContent = stats.participants_count;
  document.getElementById("countries-list").textContent = stats.countries.map(getFlagEmoji).join(", ");
  document.getElementById("new-today").textContent = `+ ${stats.new_today}`;
  document.getElementById("paid-count").textContent = stats.paid_count;
}
function getFlagEmoji(countryCode) {
  return countryCode
    .toUpperCase()
    .replace(/./g, char => String.fromCodePoint(127397 + char.charCodeAt()));
}

document.addEventListener("DOMContentLoaded", async () => {
  const user = await ensureUserAuthenticated();
  if (!user) return;

  renderUserInfo(user);

  try {
    await loadDashboardSummary();
    await loadCurrentOlympiad();
    await loadCurrentOlympiadStats();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", err);
  }
});
